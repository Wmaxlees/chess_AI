package org.ucdenver.leesw.ai;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Created by william.lees on 9/16/15.
 */
public class BitUtilities {
    private static Logger logger = LogManager.getLogger(BitUtilities.class);

    // Rows
    private static final long ROW_MASK[] =
            {
                    0b00000000_00000000_00000000_00000000_00000000_00000000_00000000_11111111L,
                    0b00000000_00000000_00000000_00000000_00000000_00000000_11111111_00000000L,
                    0b00000000_00000000_00000000_00000000_00000000_11111111_00000000_00000000L,
                    0b00000000_00000000_00000000_00000000_11111111_00000000_00000000_00000000L,
                    0b00000000_00000000_00000000_11111111_00000000_00000000_00000000_00000000L,
                    0b00000000_00000000_11111111_00000000_00000000_00000000_00000000_00000000L,
                    0b00000000_11111111_00000000_00000000_00000000_00000000_00000000_00000000L,
                    0b11111111_00000000_00000000_00000000_00000000_00000000_00000000_00000000L
            };

    // Columns
    private static final long COLUMN_MASK[] =
            {
                    0b00000001_00000001_00000001_00000001_00000001_00000001_00000001_00000001L,
                    0b00000010_00000010_00000010_00000010_00000010_00000010_00000010_00000010L,
                    0b00000100_00000100_00000100_00000100_00000100_00000100_00000100_00000100L,
                    0b00001000_00001000_00001000_00001000_00001000_00001000_00001000_00001000L,
                    0b00010000_00010000_00010000_00010000_00010000_00010000_00010000_00010000L,
                    0b00100000_00100000_00100000_00100000_00100000_00100000_00100000_00100000L,
                    0b01000000_01000000_01000000_01000000_01000000_01000000_01000000_01000000L,
                    0b10000000_10000000_10000000_10000000_10000000_10000000_10000000_10000000L
            };

    // Diagonal
    private static final long DIAGONAL_MASK[] =
            {
                    0b00000000_00000000_00000000_00000000_00000000_00000000_00000001_00000010L,
                    0b00000000_00000000_00000000_00000000_00000000_00000001_00000010_00000100L,
                    0b00000000_00000000_00000000_00000000_00000001_00000010_00000100_00001000L,
                    0b00000000_00000000_00000000_00000001_00000010_00000100_00001000_00010000L,
                    0b00000000_00000000_00000001_00000010_00000100_00001000_00010000_00100000L,
                    0b00000000_00000001_00000010_00000100_00001000_00010000_00100000_01000000L,
                    0b00000001_00000010_00000100_00001000_00010000_00100000_01000000_10000000L,
                    0b00000010_00000100_00001000_00010000_00100000_01000000_10000000_00000000L,
                    0b00000100_00001000_00010000_00100000_01000000_10000000_00000000_00000000L,
                    0b00001000_00010000_00100000_01000000_10000000_00000000_00000000_00000000L,
                    0b00010000_00100000_01000000_10000000_00000000_00000000_00000000_00000000L,
                    0b00100000_01000000_10000000_00000000_00000000_00000000_00000000_00000000L,
                    0b01000000_10000000_00000000_00000000_00000000_00000000_00000000_00000000L,
            };

    // Anti-diagonal
    private static final long ANTI_DIAGONAL_MASK[] =
            {
                    0b00000000_00000000_00000000_00000000_00000000_00000000_10000000_01000000L,
                    0b00000000_00000000_00000000_00000000_00000000_10000000_01000000_00100000L,
                    0b00000000_00000000_00000000_00000000_10000000_01000000_00100000_00010000L,
                    0b00000000_00000000_00000000_10000000_01000000_00100000_00010000_00001000L,
                    0b00000000_00000000_10000000_01000000_00100000_00010000_00001000_00000100L,
                    0b00000000_10000000_01000000_00100000_00010000_00001000_00000100_00000010L,
                    0b10000000_01000000_00100000_00010000_00001000_00000100_00000010_00000001L,
                    0b01000000_00100000_00010000_00001000_00000100_00000010_00000001_00000000L,
                    0b00100000_00010000_00001000_00000100_00000010_00000001_00000000_00000000L,
                    0b00010000_00001000_00000100_00000010_00000001_00000000_00000000_00000000L,
                    0b00001000_00000100_00000010_00000001_00000000_00000000_00000000_00000000L,
                    0b00000100_00000010_00000001_00000000_00000000_00000000_00000000_00000000L,
                    0b00000010_00000001_00000000_00000000_00000000_00000000_00000000_00000000L,
            };

    // Generate the char that represents the column
    public static String generateXChar(long mask) {
        int x = Long.numberOfTrailingZeros(mask) % 8;

        switch (x) {
            case 0: return "a";
            case 1: return "b";
            case 2: return "c";
            case 3: return "d";
            case 4: return "e";
            case 5: return "f";
            case 6: return "g";
            case 7: return "h";
            default:
                logger.error("Trailing Zeros exceeds 7 for generateX: {}", x);
                return "z";
        }
    }

    // Generate the int that represents the row
    public static String generateYChar(long mask) {
        String result = null;

        if (mask == 0b00) {
            return "*";
        }

        // Check where bit exists
        for (int i = 1; i <= 8; ++i) {
            if ((mask & getRowMask(i)) != 0b00L) {
                result = ((Integer)i).toString();
                break;
            }
        }

        return result;
    }

    public static long getColumnMask(int i) {
        if (i > COLUMN_MASK.length) {
            logger.error("Requesting COLUMN_MASK of column that doesn't exist: {}", i);
            return 0;
        }

        return COLUMN_MASK[i-1];
    }

    public static long getRowMask(int i) {
        if (i > ROW_MASK.length) {
            logger.error("Requesting ROW_MASK of row that doesn't exist: {}", i);
            return 0;
        }

        return ROW_MASK[i-1];
    }
}
